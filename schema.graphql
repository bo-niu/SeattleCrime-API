scalar GraphQLDate


type Crime {
  _id: String
  OffenseType: String
  OffenseDescription: String
  ReportDate: GraphQLDate
  OffenseStartDate: GraphQLDate
  OffenseEndDate: GraphQLDate
  Block: String
  District: String
  Beat: String
  CensusTract: String
  Longitude: Float
  Latitude: Float
}

enum CrimeType {
  Assault
  Bias Incident
  Disorderly Conduct
  DUI
  Burglary
  Homicide
  Injury
  Liquor Violation
  Narcotics
  Pickpocket
  Robbery
}

enum CrimeDistrict {
  B
  C
  D
  E
  F
  G
  J
  K
  L
  M
  N
  O
  Q
  R
  S
  U
  W
}

enum StatusType {
  New
  Assigned
  Fixed
  Closed
}

type User {
  signedIn: Boolean!
  givenName: String
  name: String
  email: String
}

type Comment {
  email: String
  crimeid: String
  content: String
  created: GraphQLDate
}

type CountVSYear {
  count: Int
  year: Int
}

input UserInput {
  name: String
  email: String
}

input CommentInput {
  email: String
  crimeid: String
  content: String
  created: GraphQLDate
}

"Input for the Home page's Filter"
input FilterInput {
  startDate: GraphQLDate
  endDate: GraphQLDate
  district: String
  beat: String
  type: String
}

#### "Input for the Report page's Filter"
#### input ReportInput {
####   startDate: GraphQLDate
####   endDate: GraphQLDate
####   offensetype: String
####   district: String
#### }

"Input for the Report page's Filter"
input ReportInput {
  startDate: GraphQLDate
  endDate: GraphQLDate
  district: String
  beat: String
  type: String
}

#### Top level declarations

type Query {
  about: String!
  user: User!
  filtrateCrimes(input: FilterInput): [Crime]
  crimeCount(input: FilterInput): Int!
  testCount(input: Int): Int!
  reportFilter(input: ReportInput): [Crime]
  getCrimeByID(crimeID: Int!): Crime
  getCrimeCountEveryYear(input: ReportInput): [CountVSYear]
  getCommentByCrimeID(input: String): [Comment]
}

type Mutation {
  userAdd(input: UserInput): User
  postComment(input: CommentInput) : Comment
}